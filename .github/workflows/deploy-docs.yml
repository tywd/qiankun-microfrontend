name: Deploy Docs to Vercel

on:
  push:
    branches: [ main ]
    paths:
      - 'docs-site/**'
  workflow_dispatch:

env:
  # Vercel配置 - 与微前端项目共用
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  # 文档站点项目ID
  VERCEL_PROJECT_ID_DOCS: ${{ secrets.VERCEL_PROJECT_ID_DOCS }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          cd docs-site
          npm ci
          npm list vitepress

      - name: Build
        run: |
          cd docs-site
          # 构建前清除缓存
          rm -rf node_modules/.vite .vitepress/cache .vitepress/dist
          # 使用NODE_OPTIONS增加内存限制
          NODE_OPTIONS=--max_old_space_size=4096 npm run docs:build
        env:
          # 启用详细日志
          DEBUG: vitepress:*

      - name: Deploy to Vercel
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID_DOCS }}
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
        shell: bash
        run: |
          set -e
          
          # 进入文档站点目录
          cd docs-site
          
          # 检查构建结果
          if [ ! -d ".vitepress/dist" ]; then
            echo "❌ 构建失败: 缺少 .vitepress/dist 目录"
            exit 1
          fi
          
          # 安装Vercel CLI
          npm install --global vercel@latest
          
          # 清除可能存在的.vercel配置
          rm -rf .vercel || true
          
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            # 生产部署
            echo "🚀 Deploying docs to production..."
            URL=$(vercel . --prod --token="${{ env.VERCEL_TOKEN }}" --force)
            echo "✅ Production deployment: ${URL}"
          else
            # 预览部署
            echo "🔄 Deploying docs preview..."
            URL=$(vercel . --token="${{ env.VERCEL_TOKEN }}" --force)
            echo "✅ Preview deployment: ${URL}"
          fi