name: Deploy Microfrontend

on:
  push:
    branches: 
      - main      # 生产环境
      - develop   # 测试环境
  pull_request:
    branches: 
      - main

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 构建和测试
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install:all
      
    - name: Lint check
      run: |
        pnpm --filter main-app run lint || echo "Lint check completed"
        pnpm --filter user-management run lint || echo "Lint check completed"
        pnpm --filter system-management run lint || echo "Lint check completed"
        
    - name: Build applications
      run: pnpm build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          main-app/dist
          sub-apps/user-management/dist
          sub-apps/system-management/dist

  # 部署主应用
  deploy-main-app:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push main-app image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/main-app.Dockerfile
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/main-app:latest
          ${{ secrets.REGISTRY_URL }}/main-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署用户管理子应用
  deploy-user-management:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.modified, 'sub-apps/user-management')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push user-management image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/user-management.Dockerfile
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/user-management:latest
          ${{ secrets.REGISTRY_URL }}/user-management:${{ github.sha }}

  # 部署系统管理子应用
  deploy-system-management:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.modified, 'sub-apps/system-management')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push system-management image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/system-management.Dockerfile
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/system-management:latest
          ${{ secrets.REGISTRY_URL }}/system-management:${{ github.sha }}

  # 部署到服务器
  deploy-to-server:
    needs: [deploy-main-app, deploy-user-management, deploy-system-management]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /opt/microfrontend
          docker-compose pull
          docker-compose up -d
          docker system prune -f